import { createClient } from '@supabase/supabase-js';
import config from './src/config.js';

async function testSupabaseConnection() {
  try {
    console.log('üîå Testing Supabase connection for Market Resolution table...');
    console.log('Supabase URL:', config.SUPABASE_URL);
    
    if (!config.SUPABASE_URL || !config.SUPABASE_ANON_KEY) {
      throw new Error('Missing Supabase configuration. Please check your .env file');
    }

    // Initialize the client
    const supabase = createClient(
      config.SUPABASE_URL,
      config.SUPABASE_ANON_KEY,
      {
        auth: {
          persistSession: false
        }
      }
    );

    console.log('‚úÖ Supabase client initialized');
    
    const tableName = config.SUPABASE_TABLE_NAME_RESOLUTION;
    console.log(`üéØ Targeting table: ${tableName}`);

    // Test a simple query to check connection
    console.log('üîÑ Testing database connection...');
    const { data, error } = await supabase.from(tableName).select('*').limit(1);
    
    if (error) {
      if (error.code === '42P01') { // Table doesn't exist
        console.log(`‚ÑπÔ∏è Table '${tableName}' does not exist. Please create it using the SQL below:`);
        console.log(`
          -- Run this SQL in your Supabase SQL editor:
          create table if not exists public.market_ai_resolution (
            id bigint generated by default as identity primary key,
            condition_id text not null unique,
            question text,
            resolvable boolean,
            reasoning text,
            settlement_criteria text,
            resolution_sources jsonb,
            suggested_improvements text,
            created_at timestamp with time zone default timezone('utc'::text, now()) not null,
            updated_at timestamp with time zone default timezone('utc'::text, now()) not null
          );
          
          -- Create an index for faster lookups
          create index if not exists idx_market_ai_resolution_condition_id 
          on public.market_ai_resolution(condition_id);
          
          -- Create a trigger to update the updated_at column
          create or replace function update_updated_at_column()
          returns trigger as $$
          begin
            new.updated_at = now();
            return new;
          end;
          $$ language plpgsql;
          
          create or replace trigger update_market_ai_resolution_updated_at
          before update on public.market_ai_resolution
          for each row
          execute function update_updated_at_column();
        `);
        process.exit(1);
      } else {
        throw error;
      }
    }
    
    console.log(`‚úÖ Successfully connected to Supabase and queried the '${tableName}' table`);
    
    // Test inserting a record
    console.log('\nüìù Testing data insertion...');
    const testRecord = {
      condition_id: 'test-resolution-' + Date.now(),
      question: 'Will this test record for resolution analysis work?',
      resolvable: true,
      reasoning: 'The test is well-defined and success can be programmatically verified.',
      settlement_criteria: 'The test passes if this record is inserted, retrieved, and deleted successfully.',
      resolution_sources: ['The script execution logs.'],
      suggested_improvements: 'None needed.'
    };
    
    const { data: insertData, error: insertError } = await supabase
      .from(tableName)
      .insert([testRecord])
      .select();
      
    if (insertError) {
      console.error('‚ùå Error inserting test record:', insertError);
      throw insertError;
    }
    
    console.log('‚úÖ Successfully inserted test record:', insertData[0]);
    
    // Test retrieving the record
    console.log('\nüîç Testing data retrieval...');
    const { data: fetchedData, error: fetchError } = await supabase
      .from(tableName)
      .select('*')
      .eq('condition_id', testRecord.condition_id);
      
    if (fetchError) {
      console.error('‚ùå Error fetching test record:', fetchError);
      throw fetchError;
    }
    
    if (fetchedData && fetchedData.length > 0) {
      console.log('‚úÖ Successfully retrieved test record:', fetchedData[0]);
    } else {
      console.error('‚ùå Test record not found after insertion');
      process.exit(1);
    }
    
    // Clean up
    console.log('\nüßπ Cleaning up test data...');
    const { error: deleteError } = await supabase
      .from(tableName)
      .delete()
      .eq('condition_id', testRecord.condition_id);
      
    if (deleteError) {
      console.warn('‚ö†Ô∏è Warning: Could not clean up test record:', deleteError);
    } else {
      console.log('‚úÖ Successfully cleaned up test data');
    }
    
    console.log('\nüéâ All tests for the market resolution table completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Error testing Supabase connection for market resolution table:');
    console.error('Error details:', {
      message: error.message,
      code: error.code,
      details: error.details,
      hint: error.hint,
      status: error.status
    });
    process.exit(1);
  }
}

testSupabaseConnection();
