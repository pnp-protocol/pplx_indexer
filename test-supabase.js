import { createClient } from '@supabase/supabase-js';
import config from './src/config.js';

async function testSupabaseConnection() {
  try {
    console.log('🔌 Testing Supabase connection...');
    console.log('Supabase URL:', config.SUPABASE_URL);
    
    if (!config.SUPABASE_URL || !config.SUPABASE_ANON_KEY) {
      throw new Error('Missing Supabase configuration. Please check your .env file');
    }

    // Initialize the client
    const supabase = createClient(
      config.SUPABASE_URL,
      config.SUPABASE_ANON_KEY,
      {
        auth: {
          persistSession: false
        }
      }
    );

    console.log('✅ Supabase client initialized');
    
    // Test a simple query to check connection
    console.log('🔄 Testing database connection...');
    const { data, error } = await supabase.from('market_ai_reasoning').select('*').limit(1);
    
    if (error) {
      if (error.code === '42P01') { // Table doesn't exist
        console.log('ℹ️ Table does not exist. Please create it using the SQL below:');
        console.log(`
          -- Run this SQL in your Supabase SQL editor:
          create table if not exists market_ai_reasoning (
            id bigint generated by default as identity primary key,
            condition_id text not null unique,
            question text not null,
            answer text not null,
            reasoning text not null,
            created_at timestamp with time zone default timezone('utc'::text, now()) not null,
            market_creation_time timestamp with time zone,
            settlement_time timestamp with time zone,
            updated_at timestamp with time zone default timezone('utc'::text, now()) not null
          );
          
          -- Create an index for faster lookups
          create index if not exists idx_market_ai_reasoning_condition_id 
          on market_ai_reasoning(condition_id);
          
          -- Create a trigger to update the updated_at column
          create or replace function update_updated_at_column()
          returns trigger as $$
          begin
            new.updated_at = now();
            return new;
          end;
          $$ language plpgsql;
          
          create or replace trigger update_market_ai_reasoning_updated_at
          before update on market_ai_reasoning
          for each row
          execute function update_updated_at_column();
        `);
        process.exit(1);
      } else {
        throw error;
      }
    }
    
    console.log('✅ Successfully connected to Supabase and queried the table');
    
    // Test inserting a record
    console.log('\n📝 Testing data insertion...');
    const testRecord = {
      condition_id: 'test-' + Date.now(),
      question: 'Is this a test market?',
      answer: 'YES',
      reasoning: 'This is a test record to verify database functionality',
      market_creation_time: new Date().toISOString(),
      settlement_time: new Date().toISOString()
    };
    
    const { data: insertData, error: insertError } = await supabase
      .from('market_ai_reasoning')
      .insert([testRecord])
      .select();
      
    if (insertError) {
      console.error('❌ Error inserting test record:', insertError);
      throw insertError;
    }
    
    console.log('✅ Successfully inserted test record:', insertData[0]);
    
    // Test retrieving the record
    console.log('\n🔍 Testing data retrieval...');
    const { data: fetchedData, error: fetchError } = await supabase
      .from('market_ai_reasoning')
      .select('*')
      .eq('condition_id', testRecord.condition_id);
      
    if (fetchError) {
      console.error('❌ Error fetching test record:', fetchError);
      throw fetchError;
    }
    
    if (fetchedData && fetchedData.length > 0) {
      console.log('✅ Successfully retrieved test record:', fetchedData[0]);
    } else {
      console.error('❌ Test record not found after insertion');
      process.exit(1);
    }
    
    // Clean up
    console.log('\n🧹 Cleaning up test data...');
    const { error: deleteError } = await supabase
      .from('market_ai_reasoning')
      .delete()
      .eq('condition_id', testRecord.condition_id);
      
    if (deleteError) {
      console.warn('⚠️ Warning: Could not clean up test record:', deleteError);
    } else {
      console.log('✅ Successfully cleaned up test data');
    }
    
    console.log('\n🎉 All tests completed successfully!');
    
  } catch (error) {
    console.error('❌ Error testing Supabase connection:');
    console.error('Error details:', {
      message: error.message,
      code: error.code,
      details: error.details,
      hint: error.hint,
      status: error.status
    });
    process.exit(1);
  }
}

testSupabaseConnection();
